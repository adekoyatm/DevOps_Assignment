name: Docker Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build, tag, and push image to Docker Hub
        id: build-image
        env:
          IMAGE_NAME: my-flask-app
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${IMAGE_NAME}:${IMAGE_TAG} .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${IMAGE_NAME}:${IMAGE_TAG}
          
    outputs:
      image_name: ${{ steps.build-image.outputs.image_name }}
      image_tag: ${{ steps.build-image.outputs.image_tag }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Generate SSH Key
        env:
            SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
            run: |
              mkdir -p~.ssh
              echo "$ {{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
              chmod 600 ~/.ssh/id_rsa      

      - name: SSH into EC2 instance
        env: 
            INSTANCE_IP: ${{secrets.INSTANCE_IP}}
            run: |
                #ssh -o
                #StrictHostKeyChecking=no -i ~/.ssh/id_rsa $INSTANCE_IP
                ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $INSTANCE_IP 'sudo docker pull $DOCKER_USERNAME/$IMAGE_NAME:$IMAGE_TAG && sudo docker stop my-flask-app || true && sudo docker rm my-flask-app || true && sudo docker run -d --name my-flask-app -p 5000:5000 $DOCKER_USERNAME/$IMAGE_NAME:$IMAGE_TAG'
                
      #           # Check if Docker is installed, install if not
      #           if ! command -v docker &> /dev/null; then
      #             sudo apt-get install -y docker.io
      #             sudo systemctl start docker
      #             sudo systemctl enable docker
      #           fi

      #           # Pull the latest Docker image
      #           docker pull ${{ needs.build.outputs.image_name }}:${{ needs.build.outputs.image_tag }}
          
      #           # Stop and remove existing container if it exists
      #           docker stop my-flask-app || true && docker rm my-flask-app || true
          
      #           # Run the Docker container with appropriate port mapping
      #           docker run -d -p  5000:5000 --restart unless-stopped --name my-flask-app ${{ needs.build.outputs.image_name }}:${{ needs.build.outputs.image_tag }}
          
      #           # Check if PM2 is installed, install if not
      #           if ! command -v pm2 &> /dev/null; then
      #             sudo npm install -g pm2
      #           fi
          
      #           # Use PM2 to manage the Flask application process
      #           pm2 start app.js --name "my-flask-app"
      #           pm2 save
      #           pm2 startup

      # #- name: SSH into EC2 instance
      #  # uses: appleboy/ssh-action@v0.1.3
      #   #with:
      #    # host: ${{ secrets.EC2_HOST }}
      #     #username: ${{ secrets.EC2_USERNAME }}
      #     #key: ${{ secrets.SSH_PRIVATE_KEY }}
      #     #script: |
      #       # Update packages
      #       #sudo apt-get update

                
          
                
